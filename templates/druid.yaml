{{- define "druid.nodeSpec" -}}
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - podAffinityTerm:
          labelSelector:
            matchLabels:
              {{- with .podLabels | merge .root.Values.druid.podLabels }}
              {{- toYaml . | nindent 20 }}
              {{- end }}
              app: druid
              component: {{ .nodeType }}
              druid_cr: {{ include "druid.fullname" .root }}
              nodeSpecUniqueStr: druid-{{ include "druid.fullname" .root }}-{{ .nodeCategory }}
          topologyKey: kubernetes.io/hostname
        weight: 1
druid.port: {{ .druidPort }}
{{- with .env }}
env: {{ toYaml . | nindent 8 }}
{{- end }}
{{- with .envFrom }}
envFrom: {{ toYaml . | nindent 8 }}
{{- end }}
{{- with .extraJvmOptions }}
extra.jvm.options: {{ . | join " " }}
{{- end }}
{{- with .jvmOptions }}
jvm.options: {{ . | join " " }}
{{- end }}
{{- with .kind }}
kind: {{ . }}
{{- end }}
nodeConfigMountPath: {{ .nodeConfigMountPath }}
{{- with .nodeSelector }}
nodeSelector: {{- toYaml . | nindent 8 }}
{{- end }}
nodeType: {{ .nodeType }}
{{- with .podAnnotations }}
podAnnotations: {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .podLabels }}
podLabels: {{- toYaml . | nindent 8 }}
{{- end }}
replicas: {{ .replicas }}
{{- with .resources }}
resources: {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .services }}
services: {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .unsupported }}
{{- toYaml . | nindent 6 }}
{{- end }}
{{- end -}}

{{- with $.Values.druid }}
{{- $extensions := list }}
{{- range $k, $_ := .extensions }}
{{- $extensions = concat $extensions . }}
{{- end }}
{{- $metadataStorage := .metadataStorage }}
---
apiVersion: druid.apache.org/v1alpha1
kind: Druid
metadata:
  labels: {{- include "druid.labels" $ | nindent 4 }}
  name: {{ include "druid.fullname" $ }}
spec:
  additionalContainer:
    - command:
        - bash
        - -c
        - |
          set -o errexit
          cp -r /opt/druid/extensions /
          exec ./bin/run-java \
            -classpath "lib/*" \
            -Ddruid.extensions.directory=/extensions \
            org.apache.druid.cli.Main tools pull-deps \
            {{- range $groupId, $_ := .extensions }}
            {{- if ne $groupId "org.apache.druid.extensions" }}
            {{- range $artifactId := . }}
            -c {{ $groupId }}:{{ $artifactId }} \
            {{- end }}
            {{- end }}
            {{- end }}
            --defaultVersion {{ $.Chart.AppVersion }} \
            --no-default-hadoop
      containerName: pull-deps
      {{- with .image }}
      image: {{ .repository }}:{{ .tag | default $.Chart.AppVersion }}
      {{- end }}
      runAsInit: true
      volumeMounts:
        - mountPath: /extensions
          name: extensions
  {{- with .affinity }}
  affinity: {{- toYaml . | nindent 4 }}
  {{- end }}
  common.runtime.properties: |
    druid.discovery.k8s.clusterIdentifier={{ include "druid.fullname" $ }}
    druid.discovery.type=k8s
    druid.extensions.loadList={{ toRawJson $extensions }}
    {{- with .s3.logs }}
    druid.indexer.logs.disableAcl={{ .disableAcls }}
    druid.indexer.logs.s3Bucket={{ .bucket | default (include "druid.fullname" $) }}
    druid.indexer.logs.s3Prefix={{ .prefix | default (include "druid.name" $ | printf "%s-logs") }}
    druid.indexer.logs.type=s3
    {{- end }}
    {{- include "druid._properties" (dict "dict" .metadataStorage "prefix" "druid.metadata.storage.") | nindent 4 }}
    {{- with .s3.segments }}
    druid.storage.baseKey={{ .prefix | default (include "druid.name" $) }}
    druid.storage.bucket={{ .bucket | default (include "druid.fullname" $) }}
    druid.storage.disableAcl={{ .disableAcls }}
    druid.storage.type=s3
    {{- end }}
    druid.zk.service.enabled=false
    {{- include "druid.properties" .commonRuntimeProperties | nindent 4 }}
  commonConfigMountPath: /opt/druid/conf/druid/cluster/_common
  containerSecurityContext:
    readOnlyRootFilesystem: true
  deleteOrphanPvc: {{ .deleteOrphanPvc }}
  disablePVCDeletionFinalizer: {{ .disablePVCDeletionFinalizer }}
  env:
    {{- if .env }}
    {{- toYaml .env | nindent 4 }}
    {{- else }}
    {{- with .extraEnv }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    {{- end }}
  envFrom:
    {{- if .envFrom }}
    {{- toYaml .envFrom | nindent 4 }}
    {{- else }}
    {{- with .extraEnvFrom }}
    {{- toYaml .| nindent 4 }}
    {{- end }}
    - secretRef:
        name: {{ include "druid.fullname" $ }}
    {{- end }}
  {{- with .extraCommonConfig }}
  extraCommonConfig: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .image }}
  image: {{ .repository }}:{{ .tag | default $.Chart.AppVersion }}
  {{- with .pull }}
  {{- with .policy }}
  imagePullPolicy: {{ . }}
  {{- end }}
  {{- with .secrets }}
  imagePullSecrets: {{ . }}
  {{- end }}
  {{- end }}
  {{- end }}
  {{- with .jvmOptions }}
  jvm.options: {{ . | join " " }}
  {{- end }}
  {{- with .log4jConfig }}
  log4j.config: |-
    {{- . | nindent 4 }}
  {{- end }}
  {{- with .metricDimensions }}
  metricDimensions.json: |-
    {{- toPrettyJson . | nindent 4 }}
  {{- end }}
  {{- with .nodeSelector }}
  nodeSelector: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .nodes }}
  nodes:
    {{- range $nodeCategory, $_ := . }}
    {{- if eq .nodeType "broker" }}
    {{- with . | merge (dict "nodeCategory" $nodeCategory) }}
    {{ $nodeCategory }}:
      {{- with .runtimeProperties }}
      runtime.properties: |
        {{- include "druid.properties" . | nindent 8 }}
      {{- end }}
      {{- include "druid.nodeSpec" (. | merge (dict "root" $)) | nindent 6 }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- range $nodeCategory, $_ := . }}
    {{- if eq .nodeType "coordinator" }}
    {{- with . | merge (dict "nodeCategory" $nodeCategory) }}
    {{ $nodeCategory }}:
      runtime.properties: |
        druid.coordinator.asOverlord.enabled=true
        druid.coordinator.asOverlord.overlordService=druid/overlord
        druid.coordinator.startDelay=PT30S
        druid.indexer.runner.namespace={{ $.Release.Namespace }}
        druid.indexer.runner.type=k8s
        {{- if $metadataStorage }}
        druid.indexer.storage.type=metadata
        {{- end }}
        druid.indexer.task.encapsulatedTask=true
        {{- include "druid.properties" .runtimeProperties | nindent 8 }}
      {{- /*
        The peons will inherit this probe from the overlord, but they don't share the same endpoints, so we have to
        effectively disable it - see
        https://druid.apache.org/docs/latest/development/extensions-contrib/k8s-jobs#overlord-single-container-pod-adapteroverlord-multi-container-pod-adapter
      */}}
      startUpProbe:
        exec:
          command: [ /bin/true ]
        initialDelaySeconds: 0
      {{- include "druid.nodeSpec" (. | merge (dict "root" $)) | nindent 6 }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- range $nodeCategory, $_ := . }}
    {{- if eq .nodeType "historical" }}
    {{- with . | merge (dict "nodeCategory" $nodeCategory) }}
    {{ $nodeCategory }}:
      {{- $storage := .storage }}
      runtime.properties: |
        {{- with $storage }}
        druid.segmentCache.locations=[ { "freeSpacePercent": {{ .freeSpacePercent }}, "maxSize": "{{ .size }}", "path": "/druid/data/segments" } ]
        {{- end }}
        {{- include "druid.properties" .runtimeProperties | nindent 8 }}
      {{- with $storage }}
      volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: {{ .size }}
            storageClassName: {{ .class | default $.Values.global.defaultStorageClass }}
      {{- end }}
      {{- include "druid.nodeSpec" (. | merge (dict "root" $)) | nindent 6 }}
    {{- end }}
    {{- end }}
    {{- end }}
    {{- range $nodeCategory, $_ := . }}
    {{- if eq .nodeType "router" }}
    {{- with . | merge (dict "nodeCategory" $nodeCategory) }}
    {{ $nodeCategory }}:
      {{- with .runtimeProperties }}
      runtime.properties: |
        {{- include "druid.properties" . | nindent 8 }}
      {{- end }}
      {{- include "druid.nodeSpec" (. | merge (dict "root" $)) | nindent 6 }}
    {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}
  podAnnotations: {{- toYaml .podAnnotations | nindent 4 }}
  podLabels: {{- toYaml .podLabels | nindent 4 }}
  scalePvcSts: true
  securityContext:
    {{- /* uid 1000 == user druid */}}
    fsGroup: 1000
    runAsGroup: 1000
    runAsUser: 1000
  serviceAccount: {{ include "druid.serviceAccountName" $ }}
  {{- with .services }}
  services: {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .tolerations }}
  tolerations: {{- toYaml . | nindent 4 }}
  {{- end }}
  volumeMounts:
    - mountPath: /druid/data
      name: data
    - mountPath: /opt/druid/extensions
      name: extensions
      readOnly: true
    - mountPath: /tmp
      name: tmp
    - mountPath: /opt/druid/var
      name: var
  volumes:
    - emptyDir: { }
      name: data
    - emptyDir: { }
      name: extensions
    - emptyDir: { }
      name: tmp
    - emptyDir: { }
      name: var
  {{- with .unsupported }}
  {{- toYaml . | nindent 2 }}
  {{- end }}
{{- end }}

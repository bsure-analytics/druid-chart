druid:
  affinity: { }
  annotations: { }
  # Overrides extraEnv:
  env: [ ]
  # Overrides extraEnvFrom:
  envFrom: [ ]
  extraEnv: [ ]
  extraEnvFrom: [ ]
  image:
    repository: apache/druid
    pull:
      policy: IfNotPresent
      secrets: [ ]
    tag: ""
  commonRuntimeProperties: { }
  deleteOrphanPvc: true
  disablePVCDeletionFinalizer: false
  extensions:
    org.apache.druid.extensions:
      - druid-datasketches
      - druid-kafka-extraction-namespace
      - druid-kafka-indexing-service
      - druid-kubernetes-extensions
      - druid-lookups-cached-global
      - druid-multi-stage-query
      - druid-s3-extensions
      - postgresql-metadata-storage
    org.apache.druid.extensions.contrib:
      - druid-kubernetes-overlord-extensions
  extraCommonConfig: [ ]
  jvmOptions:
    - -Dfile.encoding=UTF-8
    - -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
    - -Dlog4j.shutdownCallbackRegistry=org.apache.druid.common.config.Log4jShutdown
    - -Dlog4j.shutdownHookEnabled=true
    - -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.SLF4JLogger
    - -Dorg.jboss.logging.provider=slf4j
    - -Duser.timezone=UTC
    - -XX:+ExitOnOutOfMemoryError
    - -XX:MaxDirectMemorySize=2g
    - -server
  log4jConfig: |-
    <?xml version="1.0" encoding="UTF-8" ?>
    <Configuration status="WARN">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Root level="info">
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>
  metadataStorage:
    connector: { }
    #connectURI: jdbc:postgresql://druid-postgresql/druid
    #password: druid
    #user: druid
    type: postgresql
  metricDimensions: { }
  nodeSelector: { }
  nodes:
    brokers:
      druidPort: 8088
      env: [ ]
      envFrom: [ ]
      extraJvmOptions:
        - -Xms512m
        - -Xmx512m
      jvmOptions: [ ]
      kind: Deployment
      nodeSelector: { }
      nodeType: broker
      podAnnotations: { }
      podLabels: { }
      replicas: 1
      resources: { }
      runtimeProperties:
        druid:
          sql:
            enable: true
      services: [ ]
      unsupported: { }
    coordinators:
      druidPort: 8088
      env: [ ]
      envFrom: [ ]
      extraJvmOptions:
        - -Xms800m
        - -Xmx800m
      jvmOptions: [ ]
      kind: Deployment
      nodeSelector: { }
      nodeType: coordinator
      podAnnotations: { }
      podLabels: { }
      replicas: 1
      resources: { }
      runtimeProperties:
        druid:
          indexer:
            runner:
              capacity: 10
              javaOptsArray:
                - -Dfile.encoding=UTF-8
                - -Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager
                - -Dlog4j.shutdownCallbackRegistry=org.apache.druid.common.config.Log4jShutdown
                - -Dlog4j.shutdownHookEnabled=true
                - -Dnet.spy.log.LoggerImpl=net.spy.memcached.compat.log.SLF4JLogger
                - -Dorg.jboss.logging.provider=slf4j
                - -Duser.timezone=UTC
                - -XX:+ExitOnOutOfMemoryError
                - -XX:MaxDirectMemorySize=2g
                - -Xms512m
                - -Xmx512m
                - -server
      services: [ ]
      unsupported: { }
    historicals: # this is a role
      cold:
        druidPort: 8088
        env: [ ]
        envFrom: [ ]
        extraJvmOptions:
          - -Xms512m
          - -Xmx512m
        jvmOptions: [ ]
        kind: ""
        nodeSelector: { }
        nodeType: historical
        podAnnotations: { }
        podLabels: { }
        replicas: 0
        resources: { }
        runtimeProperties: { }
        services: [ ]
        storage:
          class: ""
          freeSpacePercent: 10
          size: 10Gi
        unsupported: { }
      hot:
        druidPort: 8088
        env: [ ]
        envFrom: [ ]
        extraJvmOptions:
          - -Xms512m
          - -Xmx512m
        jvmOptions: [ ]
        kind: ""
        nodeSelector: { }
        nodeType: historical
        podAnnotations: { }
        podLabels: { }
        replicas: 1
        resources: { }
        runtimeProperties: { }
        services: [ ]
        storage:
          class: ""
          freeSpacePercent: 10
          size: 10Gi
        unsupported: { }
    routers:
      # Port 8088 is required because it's hardcoded in the Druid operator - see
      # https://github.com/datainfrahq/druid-operator/issues/220 :
      druidPort: 8088
      env: [ ]
      envFrom: [ ]
      extraJvmOptions:
        - -Xmx512M
        - -Xms512M
      jvmOptions: [ ]
      kind: Deployment
      nodeSelector: { }
      nodeType: router
      podAnnotations: { }
      podLabels: { }
      replicas: 1
      resources: { }
      runtimeProperties:
        druid:
          router:
            managementProxy:
              enabled: true
      services: [ ]
      unsupported: { }
  podAnnotations:
    dummy: k8s_extension_needs_at_least_one_annotation
  podLabels: { }
  s3:
    # Configure S3 for data segments:
    segments:
      # Default value is the full name of the chart:
      bucket: ""
      disableAcls: true
      # Default value is the name of the chart:
      prefix: ""
    # Configure S3 for indexing logs:
    logs:
      # Default value is the full name of the chart:
      bucket: ""
      disableAcls: true
      # Default value is the name of the chart plus `-logs` as suffix:
      prefix: ""
  services:
    - spec:
        # Must be headless:
        clusterIP: None
  tolerations: [ ]
  unsupported: { }
# Unless overridden in druid.s3.(segments|logs).bucket (see above), this is also used as the S3 bucket name:
fullnameOverride: ""
global:
  #createClusterRole: false
  defaultStorageClass: ''
metricsServer:
  args:
    - --kubelet-insecure-tls
    - --kubelet-preferred-address-types=InternalIP
  # For local development, you may want to set this to `true`:
  enabled: false
  nameOverride: metrics-server
nameOverride: ""
operator:
  # For local development, you may want to set this to `true`:
  enabled: false
  #env:
  #  WATCH_NAMESPACE: druid
postgresql:
  # For local development, you may want to set this to `true`:
  enabled: false
  #auth:
  #  database: druid
  #  enablePostgresUser: false
  #  password: druid
  #  username: druid
role:
  annotations: { }
roleBinding:
  annotations: { }
secret: { }
  #stringData:
  #  AWS_ACCESS_KEY_ID: <aws-access-key-id>
  #  AWS_REGION: eu-central-1
  #  AWS_SECRET_ACCESS_KEY: <aws-secret-access-key>
service:
  enabled: true
  port: 80
  type: ClusterIP
serviceAccount:
  create: true
  automount: true
  annotations: { }
  name: ""
